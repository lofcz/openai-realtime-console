!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).Wavtools={})}(this,(function(e){"use strict";class t{static floatTo16BitPCM(e){const t=new ArrayBuffer(2*e.length),n=new DataView(t);let s=0;for(let t=0;t<e.length;t++,s+=2){let r=Math.max(-1,Math.min(1,e[t]));n.setInt16(s,r<0?32768*r:32767*r,!0)}return t}static mergeBuffers(e,t){const n=new Uint8Array(e.byteLength+t.byteLength);return n.set(new Uint8Array(e),0),n.set(new Uint8Array(t),e.byteLength),n.buffer}_packData(e,t){return[new Uint8Array([t,t>>8]),new Uint8Array([t,t>>8,t>>16,t>>24])][e]}pack(e,t){if(!t?.bitsPerSample)throw new Error('Missing "bitsPerSample"');if(!t?.channels)throw new Error('Missing "channels"');if(!t?.data)throw new Error('Missing "data"');const{bitsPerSample:n,channels:s,data:r}=t,a=["RIFF",this._packData(1,52),"WAVE","fmt ",this._packData(1,16),this._packData(0,1),this._packData(0,s.length),this._packData(1,e),this._packData(1,e*s.length*n/8),this._packData(0,s.length*n/8),this._packData(0,n),"data",this._packData(1,s[0].length*s.length*n/8),r],i=new Blob(a,{type:"audio/mpeg"});return{blob:i,url:URL.createObjectURL(i),channelCount:s.length,sampleRate:e,duration:r.byteLength/(s.length*e*2)}}}globalThis.WavPacker=t;const n=[4186.01,4434.92,4698.63,4978.03,5274.04,5587.65,5919.91,6271.93,6644.88,7040,7458.62,7902.13],s=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],r=[],a=[];for(let e=1;e<=8;e++)for(let t=0;t<n.length;t++){const i=n[t];r.push(i/Math.pow(2,8-e)),a.push(s[t]+e)}const i=[32,2e3],o=r.filter(((e,t)=>r[t]>i[0]&&r[t]<i[1])),c=a.filter(((e,t)=>r[t]>i[0]&&r[t]<i[1]));class l{static getFrequencies(e,t,n,s="frequency",i=-100,l=-30){n||(n=new Float32Array(e.frequencyBinCount),e.getFloatFrequencyData(n));const u=t/2,h=1/n.length*u;let f,d,p;if("music"===s||"voice"===s){const e="voice"===s?o:r,t=Array(e.length).fill(i);for(let s=0;s<n.length;s++){const r=s*h,a=n[s];for(let n=e.length-1;n>=0;n--)if(r>e[n]){t[n]=Math.max(t[n],a);break}}f=t,d="voice"===s?o:r,p="voice"===s?c:a}else f=Array.from(n),d=f.map(((e,t)=>h*t)),p=d.map((e=>`${e.toFixed(2)} Hz`));const m=f.map((e=>Math.max(0,Math.min((e-i)/(l-i),1))));return{values:new Float32Array(m),frequencies:d,labels:p}}constructor(e,t=null){if(this.fftResults=[],t){const{length:n,sampleRate:s}=t,r=new OfflineAudioContext({length:n,sampleRate:s}),a=r.createBufferSource();a.buffer=t;const i=r.createAnalyser();i.fftSize=8192,i.smoothingTimeConstant=.1,a.connect(i);const o=1/60,c=n/s,l=e=>{const t=o*e;t<c&&r.suspend(t).then((()=>{const t=new Float32Array(i.frequencyBinCount);i.getFloatFrequencyData(t),this.fftResults.push(t),l(e+1)})),1===e?r.startRendering():r.resume()};a.start(0),l(1),this.audio=e,this.context=r,this.analyser=i,this.sampleRate=s,this.audioBuffer=t}else{const t=new AudioContext,n=t.createMediaElementSource(e),s=t.createAnalyser();s.fftSize=8192,s.smoothingTimeConstant=.1,n.connect(s),s.connect(t.destination),this.audio=e,this.context=t,this.analyser=s,this.sampleRate=this.context.sampleRate,this.audioBuffer=null}}getFrequencies(e="frequency",t=-100,n=-30){let s=null;if(this.audioBuffer&&this.fftResults.length){const e=this.audio.currentTime/this.audio.duration,t=Math.min(e*this.fftResults.length|0,this.fftResults.length-1);s=this.fftResults[t]}return l.getFrequencies(this.analyser,this.sampleRate,s,e,t,n)}async resumeIfSuspended(){return"suspended"===this.context.state&&await this.context.resume(),!0}}globalThis.AudioAnalysis=l;const u=new Blob(["\nclass StreamProcessor extends AudioWorkletProcessor {\n  constructor() {\n    super();\n    this.hasStarted = false;\n    this.hasInterrupted = false;\n    this.outputBuffers = [];\n    this.bufferLength = 128;\n    this.write = { buffer: new Float32Array(this.bufferLength), trackId: null };\n    this.writeOffset = 0;\n    this.trackSampleOffsets = {};\n    this.port.onmessage = (event) => {\n      if (event.data) {\n        const payload = event.data;\n        if (payload.event === 'write') {\n          const int16Array = payload.buffer;\n          const float32Array = new Float32Array(int16Array.length);\n          for (let i = 0; i < int16Array.length; i++) {\n            float32Array[i] = int16Array[i] / 0x8000; // Convert Int16 to Float32\n          }\n          this.writeData(float32Array, payload.trackId);\n        } else if (\n          payload.event === 'offset' ||\n          payload.event === 'interrupt'\n        ) {\n          const requestId = payload.requestId;\n          const trackId = this.write.trackId;\n          const offset = this.trackSampleOffsets[trackId] || 0;\n          this.port.postMessage({\n            event: 'offset',\n            requestId,\n            trackId,\n            offset,\n          });\n          if (payload.event === 'interrupt') {\n            this.hasInterrupted = true;\n          }\n        } else {\n          throw new Error(`Unhandled event \"${payload.event}\"`);\n        }\n      }\n    };\n  }\n\n  writeData(float32Array, trackId = null) {\n    let { buffer } = this.write;\n    let offset = this.writeOffset;\n    for (let i = 0; i < float32Array.length; i++) {\n      buffer[offset++] = float32Array[i];\n      if (offset >= buffer.length) {\n        this.outputBuffers.push(this.write);\n        this.write = { buffer: new Float32Array(this.bufferLength), trackId };\n        buffer = this.write.buffer;\n        offset = 0;\n      }\n    }\n    this.writeOffset = offset;\n    return true;\n  }\n\n  process(inputs, outputs, parameters) {\n    const output = outputs[0];\n    const outputChannelData = output[0];\n    const outputBuffers = this.outputBuffers;\n    if (this.hasInterrupted) {\n      this.port.postMessage({ event: 'stop' });\n      return false;\n    } else if (outputBuffers.length) {\n      this.hasStarted = true;\n      const { buffer, trackId } = outputBuffers.shift();\n      for (let i = 0; i < outputChannelData.length; i++) {\n        outputChannelData[i] = buffer[i] || 0;\n      }\n      if (trackId) {\n        this.trackSampleOffsets[trackId] =\n          this.trackSampleOffsets[trackId] || 0;\n        this.trackSampleOffsets[trackId] += buffer.length;\n      }\n      return true;\n    } else if (this.hasStarted) {\n      this.port.postMessage({ event: 'stop' });\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n\nregisterProcessor('stream_processor', StreamProcessor);\n"],{type:"application/javascript"}),h=URL.createObjectURL(u);class f{constructor({sampleRate:e=44100}={}){this.scriptSrc=h,this.sampleRate=e,this.context=null,this.stream=null,this.analyser=null,this.trackSampleOffsets={},this.interruptedTrackIds={}}async connect(){this.context=new AudioContext({sampleRate:this.sampleRate}),"suspended"===this.context.state&&await this.context.resume();try{await this.context.audioWorklet.addModule(this.scriptSrc)}catch(e){throw console.error(e),new Error(`Could not add audioWorklet module: ${this.scriptSrc}`)}const e=this.context.createAnalyser();return e.fftSize=8192,e.smoothingTimeConstant=.1,this.analyser=e,!0}getFrequencies(e="frequency",t=-100,n=-30){if(!this.analyser)throw new Error("Not connected, please call .connect() first");return l.getFrequencies(this.analyser,this.sampleRate,null,e,t,n)}_start(){const e=new AudioWorkletNode(this.context,"stream_processor");return e.connect(this.context.destination),e.port.onmessage=t=>{const{event:n}=t.data;if("stop"===n)e.disconnect(),this.stream=null;else if("offset"===n){const{requestId:e,trackId:n,offset:s}=t.data,r=s/this.sampleRate;this.trackSampleOffsets[e]={trackId:n,offset:s,currentTime:r}}},this.analyser.disconnect(),e.connect(this.analyser),this.stream=e,!0}add16BitPCM(e,t="default"){if("string"!=typeof t)throw new Error("trackId must be a string");if(this.interruptedTrackIds[t])return;let n;if(this.stream||this._start(),e instanceof Int16Array)n=e;else{if(!(e instanceof ArrayBuffer))throw new Error("argument must be Int16Array or ArrayBuffer");n=new Int16Array(e)}return this.stream.port.postMessage({event:"write",buffer:n,trackId:t}),n}async getTrackSampleOffset(e=!1){if(!this.stream)return null;const t=crypto.randomUUID();let n;for(this.stream.port.postMessage({event:e?"interrupt":"offset",requestId:t});!n;)n=this.trackSampleOffsets[t],await new Promise((e=>setTimeout((()=>e()),1)));const{trackId:s}=n;return e&&s&&(this.interruptedTrackIds[s]=!0),n}async interrupt(){return this.getTrackSampleOffset(!0)}}globalThis.WavStreamPlayer=f;const d=new Blob(["\nclass AudioProcessor extends AudioWorkletProcessor {\n\n  constructor() {\n    super();\n    this.port.onmessage = this.receive.bind(this);\n    this.initialize();\n  }\n\n  initialize() {\n    this.foundAudio = false;\n    this.recording = false;\n    this.chunks = [];\n  }\n\n  /**\n   * Concatenates sampled chunks into channels\n   * Format is chunk[Left[], Right[]]\n   */\n  readChannelData(chunks, channel = -1, maxChannels = 9) {\n    let channelLimit;\n    if (channel !== -1) {\n      if (chunks[0] && chunks[0].length - 1 < channel) {\n        throw new Error(\n          `Channel ${channel} out of range: max ${chunks[0].length}`\n        );\n      }\n      channelLimit = channel + 1;\n    } else {\n      channel = 0;\n      channelLimit = Math.min(chunks[0] ? chunks[0].length : 1, maxChannels);\n    }\n    const channels = [];\n    for (let n = channel; n < channelLimit; n++) {\n      const length = chunks.reduce((sum, chunk) => {\n        return sum + chunk[n].length;\n      }, 0);\n      const buffers = chunks.map((chunk) => chunk[n]);\n      const result = new Float32Array(length);\n      let offset = 0;\n      for (let i = 0; i < buffers.length; i++) {\n        result.set(buffers[i], offset);\n        offset += buffers[i].length;\n      }\n      channels[n] = result;\n    }\n    return channels;\n  }\n\n  /**\n   * Combines parallel audio data into correct format,\n   * channels[Left[], Right[]] to float32Array[LRLRLRLR...]\n   */\n  formatAudioData(channels) {\n    if (channels.length === 1) {\n      // Simple case is only one channel\n      const float32Array = channels[0].slice();\n      const meanValues = channels[0].slice();\n      return { float32Array, meanValues };\n    } else {\n      const float32Array = new Float32Array(\n        channels[0].length * channels.length\n      );\n      const meanValues = new Float32Array(channels[0].length);\n      for (let i = 0; i < channels[0].length; i++) {\n        const offset = i * channels.length;\n        let meanValue = 0;\n        for (let n = 0; n < channels.length; n++) {\n          float32Array[offset + n] = channels[n][i];\n          meanValue += channels[n][i];\n        }\n        meanValues[i] = meanValue / channels.length;\n      }\n      return { float32Array, meanValues };\n    }\n  }\n\n  /**\n   * Converts 32-bit float data to 16-bit integers\n   */\n  floatTo16BitPCM(float32Array) {\n    const buffer = new ArrayBuffer(float32Array.length * 2);\n    const view = new DataView(buffer);\n    let offset = 0;\n    for (let i = 0; i < float32Array.length; i++, offset += 2) {\n      let s = Math.max(-1, Math.min(1, float32Array[i]));\n      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n    }\n    return buffer;\n  }\n\n  /**\n   * Retrieves the most recent amplitude values from the audio stream\n   * @param {number} channel\n   */\n  getValues(channel = -1) {\n    const channels = this.readChannelData(this.chunks, channel);\n    const { meanValues } = this.formatAudioData(channels);\n    return { meanValues, channels };\n  }\n\n  /**\n   * Exports chunks as an audio/wav file\n   */\n  export() {\n    const channels = this.readChannelData(this.chunks);\n    const { float32Array, meanValues } = this.formatAudioData(channels);\n    const audioData = this.floatTo16BitPCM(float32Array);\n    return {\n      meanValues: meanValues,\n      audio: {\n        bitsPerSample: 16,\n        channels: channels,\n        data: audioData,\n      },\n    };\n  }\n\n  receive(e) {\n    const { event, id } = e.data;\n    let receiptData = {};\n    switch (event) {\n      case 'start':\n        this.recording = true;\n        break;\n      case 'stop':\n        this.recording = false;\n        break;\n      case 'clear':\n        this.initialize();\n        break;\n      case 'export':\n        receiptData = this.export();\n        break;\n      case 'read':\n        receiptData = this.getValues();\n        break;\n      default:\n        break;\n    }\n    // Always send back receipt\n    this.port.postMessage({ event: 'receipt', id, data: receiptData });\n  }\n\n  sendChunk(chunk) {\n    const channels = this.readChannelData([chunk]);\n    const { float32Array, meanValues } = this.formatAudioData(channels);\n    const rawAudioData = this.floatTo16BitPCM(float32Array);\n    const monoAudioData = this.floatTo16BitPCM(meanValues);\n    this.port.postMessage({\n      event: 'chunk',\n      data: {\n        mono: monoAudioData,\n        raw: rawAudioData,\n      },\n    });\n  }\n\n  process(inputList, outputList, parameters) {\n    // Copy input to output (e.g. speakers)\n    // Note that this creates choppy sounds with Mac products\n    const sourceLimit = Math.min(inputList.length, outputList.length);\n    for (let inputNum = 0; inputNum < sourceLimit; inputNum++) {\n      const input = inputList[inputNum];\n      const output = outputList[inputNum];\n      const channelCount = Math.min(input.length, output.length);\n      for (let channelNum = 0; channelNum < channelCount; channelNum++) {\n        input[channelNum].forEach((sample, i) => {\n          output[channelNum][i] = sample;\n        });\n      }\n    }\n    const inputs = inputList[0];\n    // There's latency at the beginning of a stream before recording starts\n    // Make sure we actually receive audio data before we start storing chunks\n    let sliceIndex = 0;\n    if (!this.foundAudio) {\n      for (const channel of inputs) {\n        sliceIndex = 0; // reset for each channel\n        if (this.foundAudio) {\n          break;\n        }\n        if (channel) {\n          for (const value of channel) {\n            if (value !== 0) {\n              // find only one non-zero entry in any channel\n              this.foundAudio = true;\n              break;\n            } else {\n              sliceIndex++;\n            }\n          }\n        }\n      }\n    }\n    if (inputs && inputs[0] && this.foundAudio && this.recording) {\n      // We need to copy the TypedArray, because the `process`\n      // internals will reuse the same buffer to hold each input\n      const chunk = inputs.map((input) => input.slice(sliceIndex));\n      this.chunks.push(chunk);\n      this.sendChunk(chunk);\n    }\n    return true;\n  }\n}\n\nregisterProcessor('audio_processor', AudioProcessor);\n"],{type:"application/javascript"}),p=URL.createObjectURL(d);class m{constructor({sampleRate:e=44100,outputToSpeakers:t=!1,debug:n=!1}={}){this.scriptSrc=p,this.sampleRate=e,this.outputToSpeakers=t,this.debug=!!n,this._deviceChangeCallback=null,this._devices=[],this.stream=null,this.processor=null,this.source=null,this.node=null,this.recording=!1,this._lastEventId=0,this.eventReceipts={},this.eventTimeout=5e3,this._chunkProcessor=()=>{},this._chunkProcessorSize=void 0,this._chunkProcessorBuffer={raw:new ArrayBuffer(0),mono:new ArrayBuffer(0)}}static async decode(e,n=44100,s=-1){const r=new AudioContext({sampleRate:n});let a,i;if(e instanceof Blob){if(-1!==s)throw new Error('Can not specify "fromSampleRate" when reading from Blob');i=e,a=await i.arrayBuffer()}else if(e instanceof ArrayBuffer){if(-1!==s)throw new Error('Can not specify "fromSampleRate" when reading from ArrayBuffer');a=e,i=new Blob([a],{type:"audio/wav"})}else{let n,r;if(e instanceof Int16Array){r=e,n=new Float32Array(e.length);for(let t=0;t<e.length;t++)n[t]=e[t]/32768}else if(e instanceof Float32Array)n=e;else{if(!(e instanceof Array))throw new Error('"audioData" must be one of: Blob, Float32Arrray, Int16Array, ArrayBuffer, Array<number>');n=new Float32Array(e)}if(-1===s)throw new Error('Must specify "fromSampleRate" when reading from Float32Array, In16Array or Array');if(s<3e3)throw new Error('Minimum "fromSampleRate" is 3000 (3kHz)');r||(r=t.floatTo16BitPCM(n));const o={bitsPerSample:16,channels:[n],data:r};i=(new t).pack(s,o).blob,a=await i.arrayBuffer()}const o=await r.decodeAudioData(a),c=o.getChannelData(0);return{blob:i,url:URL.createObjectURL(i),values:c,audioBuffer:o}}log(){return this.debug&&this.log(...arguments),!0}getSampleRate(){return this.sampleRate}getStatus(){return this.processor?this.recording?"recording":"paused":"ended"}async _event(e,t={},n=null){if(!(n=n||this.processor))throw new Error("Can not send events without recording first");const s={event:e,id:this._lastEventId++,data:t};n.port.postMessage(s);const r=(new Date).valueOf();for(;!this.eventReceipts[s.id];){if((new Date).valueOf()-r>this.eventTimeout)throw new Error(`Timeout waiting for "${e}" event`);await new Promise((e=>setTimeout((()=>e(!0)),1)))}const a=this.eventReceipts[s.id];return delete this.eventReceipts[s.id],a}listenForDeviceChange(e){if(null===e&&this._deviceChangeCallback)navigator.mediaDevices.removeEventListener("devicechange",this._deviceChangeCallback),this._deviceChangeCallback=null;else if(null!==e){let t=0,n=[];const s=e=>e.map((e=>e.deviceId)).sort().join(","),r=async()=>{let r=++t;const a=await this.listDevices();r===t&&s(n)!==s(a)&&(n=a,e(a.slice()))};navigator.mediaDevices.addEventListener("devicechange",r),r(),this._deviceChangeCallback=r}return!0}async requestPermission(){const e=await navigator.permissions.query({name:"microphone"});if("denied"===e.state)window.alert("You must grant microphone access to use this feature.");else if("prompt"===e.state)try{const e=await navigator.mediaDevices.getUserMedia({audio:!0});e.getTracks().forEach((e=>e.stop()))}catch(e){window.alert("You must grant microphone access to use this feature.")}return!0}async listDevices(){if(!navigator.mediaDevices||!("enumerateDevices"in navigator.mediaDevices))throw new Error("Could not request user devices");await this.requestPermission();const e=(await navigator.mediaDevices.enumerateDevices()).filter((e=>"audioinput"===e.kind)),t=e.findIndex((e=>"default"===e.deviceId)),n=[];if(-1!==t){let s=e.splice(t,1)[0],r=e.findIndex((e=>e.groupId===s.groupId));-1!==r&&(s=e.splice(r,1)[0]),s.default=!0,n.push(s)}return n.concat(e)}async begin(e){if(this.processor)throw new Error("Already connected: please call .end() to start a new session");if(!navigator.mediaDevices||!("getUserMedia"in navigator.mediaDevices))throw new Error("Could not request user media");try{const t={audio:!0};e&&(t.audio={deviceId:{exact:e}}),this.stream=await navigator.mediaDevices.getUserMedia(t)}catch(e){throw new Error("Could not start media stream")}const n=new AudioContext({sampleRate:this.sampleRate}),s=n.createMediaStreamSource(this.stream);try{await n.audioWorklet.addModule(this.scriptSrc)}catch(e){throw console.error(e),new Error(`Could not add audioWorklet module: ${this.scriptSrc}`)}const r=new AudioWorkletNode(n,"audio_processor");r.port.onmessage=e=>{const{event:n,id:s,data:r}=e.data;if("receipt"===n)this.eventReceipts[s]=r;else if("chunk"===n)if(this._chunkProcessorSize){const e=this._chunkProcessorBuffer;this._chunkProcessorBuffer={raw:t.mergeBuffers(e.raw,r.raw),mono:t.mergeBuffers(e.mono,r.mono)},this._chunkProcessorBuffer.mono.byteLength>=this._chunkProcessorSize&&(this._chunkProcessor(this._chunkProcessorBuffer),this._chunkProcessorBuffer={raw:new ArrayBuffer(0),mono:new ArrayBuffer(0)})}else this._chunkProcessor(r)};const a=s.connect(r),i=n.createAnalyser();return i.fftSize=8192,i.smoothingTimeConstant=.1,a.connect(i),this.outputToSpeakers&&(console.warn("Warning: Output to speakers may affect sound quality,\nespecially due to system audio feedback preventative measures.\nuse only for debugging"),i.connect(n.destination)),this.source=s,this.node=a,this.analyser=i,this.processor=r,!0}getFrequencies(e="frequency",t=-100,n=-30){if(!this.processor)throw new Error("Session ended: please call .begin() first");return l.getFrequencies(this.analyser,this.sampleRate,null,e,t,n)}async pause(){if(!this.processor)throw new Error("Session ended: please call .begin() first");if(!this.recording)throw new Error("Already paused: please call .record() first");return this._chunkProcessorBuffer.raw.byteLength&&this._chunkProcessor(this._chunkProcessorBuffer),this.log("Pausing ..."),await this._event("stop"),this.recording=!1,!0}async record(e=()=>{},t=8192){if(!this.processor)throw new Error("Session ended: please call .begin() first");if(this.recording)throw new Error("Already recording: please call .pause() first");if("function"!=typeof e)throw new Error("chunkProcessor must be a function");return this._chunkProcessor=e,this._chunkProcessorSize=t,this._chunkProcessorBuffer={raw:new ArrayBuffer(0),mono:new ArrayBuffer(0)},this.log("Recording ..."),await this._event("start"),this.recording=!0,!0}async clear(){if(!this.processor)throw new Error("Session ended: please call .begin() first");return await this._event("clear"),!0}async read(){if(!this.processor)throw new Error("Session ended: please call .begin() first");this.log("Reading ...");return await this._event("read")}async save(e=!1){if(!this.processor)throw new Error("Session ended: please call .begin() first");if(!e&&this.recording)throw new Error("Currently recording: please call .pause() first, or call .save(true) to force");this.log("Exporting ...");const n=await this._event("export");return(new t).pack(this.sampleRate,n.audio)}async end(){if(!this.processor)throw new Error("Session ended: please call .begin() first");const e=this.processor;this.log("Stopping ..."),await this._event("stop"),this.recording=!1;this.stream.getTracks().forEach((e=>e.stop())),this.log("Exporting ...");const n=await this._event("export",{},e);this.processor.disconnect(),this.source.disconnect(),this.node.disconnect(),this.analyser.disconnect(),this.stream=null,this.processor=null,this.source=null,this.node=null;return(new t).pack(this.sampleRate,n.audio)}async quit(){return this.listenForDeviceChange(null),this.processor&&await this.end(),!0}}globalThis.WavRecorder=m,e.AudioAnalysis=l,e.WavPacker=t,e.WavRecorder=m,e.WavStreamPlayer=f}));
//# sourceMappingURL=audio-lib.min.js.map
